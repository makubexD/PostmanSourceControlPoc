{
	"info": {
		"_postman_id": "8bb27d30-00bf-4952-8ba3-14366cdd02bd",
		"name": "DIDConfig",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "CUY",
			"item": [
				{
					"name": "TR - [Noble] SubcampaignByTFN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e439a3b-f3ae-42ed-bbb1-3e2fa9c66198",
								"exec": [
									"let expectedIbsubCampaign = pm.iterationData.get(\"IbSubCampaign\") || pm.collectionVariables.get(\"IbSubCampaign\");\r",
									"let didTfn = pm.iterationData.get(\"Did\") || pm.collectionVariables.get(\"Did\") || pm.request.url.query.get(\"Tfn\");\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let testName = `DID/Tfn: ${didTfn}, expected Subcampaign: ${expectedIbsubCampaign} ---> Subcampaign: ${jsonData.Subcampaign}`;\r",
									"\r",
									"pm.test(testName, function () {\r",
									"    pm.expect(jsonData.Subcampaign).to.eql(expectedIbsubCampaign.toString());\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "11349ad9-00f7-449b-814f-3e2f2ce8b1ef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://lm.cignium.com/run/cignium/cuy/{{CurrentEnv}}/subcampaign-table?Tfn={{Did}}",
							"protocol": "https",
							"host": [
								"lm",
								"cignium",
								"com"
							],
							"path": [
								"run",
								"cignium",
								"cuy",
								"{{CurrentEnv}}",
								"subcampaign-table"
							],
							"query": [
								{
									"key": "Tfn",
									"value": "{{Did}}"
								}
							]
						},
						"description": "# Purpose:\n\nTo validate the IbSubCampaign\n\n## Usage\n\nCreate a json file like:\n\n```\n[\n {\n   \"IbSubCampaign\": \"SB##\",\n   \"Did\": ##########\n }\n]\n\n```"
					},
					"response": [
						{
							"id": "01224772-811b-43e7-b587-7598e6d698ae",
							"name": "00.TR-SubCampaignByTFN_2016957537",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lm.cignium.com/run/cignium/cuy/{{CurrentEnv}}/subcampaign-table?Tfn={{Did}}",
									"protocol": "https",
									"host": [
										"lm",
										"cignium",
										"com"
									],
									"path": [
										"run",
										"cignium",
										"cuy",
										"{{CurrentEnv}}",
										"subcampaign-table"
									],
									"query": [
										{
											"key": "Tfn",
											"value": "{{Did}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Length",
									"value": "158"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 03 May 2022 23:20:24 GMT"
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "Request-Context"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Request-Context",
									"value": "appId=cid-v1:cd9fbec2-9850-4ba7-ab93-7960ae35dedd"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Subcampaign\": \"SB33\",\n    \"Active\": \"TRUE\"\n}"
						}
					]
				}
			],
			"id": "5d4e6c82-14f4-400b-bbd4-2414989d07f0"
		},
		{
			"name": "ByCampaigns",
			"item": [
				{
					"name": "PR - [DNIS - OB]",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25182bf0-be74-42eb-9697-57c6216c9d7b",
								"exec": [
									"let expectedObsubCampaign = pm.iterationData.get(\"ObSubCampaign\") || pm.collectionVariables.get(\"ObSubCampaign\");\r",
									"\r",
									"let afid = pm.iterationData.get(\"Afid\") || pm.collectionVariables.get(\"Afid\") || pm.request.url.query.get(\"Afid\");\r",
									"let campaign = (pm.iterationData.get(\"Campaign\") || pm.collectionVariables.get(\"Campaign\") || '').toUpperCase();\r",
									"\r",
									"campaign = ParseCampaignName(campaign);\r",
									"\r",
									"// let subCampaignOBWithOutPrefix = expectedObsubCampaign.substring(2); OLD, when was noble\r",
									"let subCampaignOBWithOutPrefix = expectedObsubCampaign; // new with genesys\r",
									"\r",
									"let testName = `${campaign} :::: -- With Afid equals to: ${afid} must have SubCampaign --> ${expectedObsubCampaign}`;\r",
									"\r",
									"pm.test(testName, function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var dnis = jsonData.dnis;\r",
									"\r",
									"    if (dnis){        \r",
									"        var subCampaignOBWithOutPrefixFromDnis = dnis.substring(5,9);// FROM 7 TO 9 because of Genesys\r",
									"        pm.expect(subCampaignOBWithOutPrefix).to.eql(subCampaignOBWithOutPrefixFromDnis);\r",
									"    }    \r",
									"});\r",
									"\r",
									"function ParseCampaignName(campaign) {\r",
									"    let cuyPrefix = 'CUY-';\r",
									"\r",
									"    if (!campaign.includes(cuyPrefix))\r",
									"        campaign = `${cuyPrefix}${campaign}`;\r",
									"    \r",
									"    if ([\"CUY-ZMA\", \"ZMA\"].includes(campaign)){\r",
									"        campaign = \"CUY-OMA\";        \r",
									"    }\r",
									"\r",
									"    return campaign;\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1a1ea0e0-47ae-4a66-b75a-82114080f1b6",
								"exec": [
									"let campaign = (pm.iterationData.get(\"Campaign\") || pm.collectionVariables.get(\"Campaign\") || '').toUpperCase();\r",
									"let isZingCarrier = pm.iterationData.get(\"IsZingCarrier\") || pm.collectionVariables.get(\"IsZingCarrier\");\r",
									"\r",
									"SetDefaultZipCode();\r",
									"UpdateZipCodeForZing(isZingCarrier);\r",
									"ParseCampaignName(campaign);\r",
									"SetObSubcampaignEndpoint(campaign);\r",
									"\r",
									"\r",
									"function SetDefaultZipCode() {\r",
									"    let defaultZipcode = \"07303\";\r",
									"    pm.collectionVariables.set(\"ZipCode\",defaultZipcode);\r",
									"}\r",
									"\r",
									"function UpdateZipCodeForZing(isZingCarrier) {\r",
									"    var zingZipCode = \"60603\";\r",
									"    \r",
									"    //TBD: To improve approach to evaluate between ZING/ZMA/OMA\r",
									"    if (isZingCarrier == 1) {\r",
									"        pm.collectionVariables.set(\"ZipCode\", zingZipCode);\r",
									"    }\r",
									"}\r",
									"\r",
									"function ParseCampaignName(campaign) {\r",
									"    let cuyPrefix = 'CUY-';\r",
									"\r",
									"    if (!campaign.includes(cuyPrefix))\r",
									"        campaign = `${cuyPrefix}${campaign}`;\r",
									"    \r",
									"    // https://learning.postman.com/docs/sending-requests/variables/#using-data-variables\r",
									"    if ([\"CUY-ZMA\", \"ZMA\"].includes(campaign)){\r",
									"        campaign = \"CUY-OMA\";\r",
									"        //pm.iterationData.set(\"Campaign\", campaign);\r",
									"        pm.collectionVariables.set(\"Campaign\", campaign);\r",
									"    }    \r",
									"}\r",
									"\r",
									"function SetObSubcampaignEndpoint(campaign) {\r",
									"    pm.collectionVariables.set(\"OBSubCampaignEndpoint\", \"dnis\");\r",
									"    if ([\"CUY-ANMA\", \"CUY-HMA\"].includes(campaign)) {\r",
									"        pm.collectionVariables.set(\"OBSubCampaignEndpoint\", \"dnis-subcampaign-ob\");\r",
									"    }\r",
									"\r",
									"    if ([\"CUY-ANMA\"].includes(campaign)) {\r",
									"        pm.request.url.addQueryParams({\r",
									"            key: \"Tier\",\r",
									"            value: \"\"\r",
									"        });\r",
									"\r",
									"        pm.request.url.addQueryParams({\r",
									"            key: \"CreateReason\",\r",
									"            value: \"\"\r",
									"        });\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f9695147-6436-4ff3-b49e-df9d275c5b33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://lm.cignium.com/run/cignium/{{Campaign}}/{{CurrentEnv}}/{{OBSubCampaignEndpoint}}?State=NJ&Afid={{Afid}}&CID={{Cid}}&ZipCode={{ZipCode}}",
							"protocol": "https",
							"host": [
								"lm",
								"cignium",
								"com"
							],
							"path": [
								"run",
								"cignium",
								"{{Campaign}}",
								"{{CurrentEnv}}",
								"{{OBSubCampaignEndpoint}}"
							],
							"query": [
								{
									"key": "State",
									"value": "NJ"
								},
								{
									"key": "Afid",
									"value": "{{Afid}}"
								},
								{
									"key": "CID",
									"value": "{{Cid}}"
								},
								{
									"key": "ZipCode",
									"value": "{{ZipCode}}"
								}
							]
						},
						"description": "# Purpose:\n\nTo validate the correct OB SubCampaign, based on:\n\n*   Afid\n*   Cid\n*   Other (Depend on the campaign)\n    \n\n## Usage\n\nCreate a json file like:\n\n```\n[\n {\n   \"Campaign\": \"cuy-AAA\",\n   \"Afid\": ######,\n   \"ObSubCampaign\": \"SB##\"\n }\n]\n\n```"
					},
					"response": []
				},
				{
					"name": "TR - [IVR] Destination DIDs (Liveops)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62e1252b-5a07-47a2-8972-9b3b6fa3b230",
								"exec": [
									"let type = pm.iterationData.get(\"DestinationDidTypeLiveops\") || pm.collectionVariables.get(\"DestinationDidTypeLiveops\") || pm.request.url.query.get(\"Type\");\r",
									"let didTfn = pm.iterationData.get(\"Did\") || pm.collectionVariables.get(\"Did\") || pm.request.url.query.get(\"Tfn\");\r",
									"\r",
									"let campaign = (pm.iterationData.get(\"Campaign\") || pm.collectionVariables.get(\"Campaign\") || '').toUpperCase();\r",
									"let liveopsNoFormat = (pm.iterationData.get(\"LiveopsDid\") || '');\r",
									"let liveops = \"\";\r",
									"\r",
									"let testName = \"\"; \r",
									"\r",
									"liveops = [ \"\", null, \"null\", \"NA\", \"N/A\"].includes(liveopsNoFormat) ? null :  liveopsNoFormat.toString();\r",
									"\r",
									"if (type == \"DestinationDID\"){\r",
									"    testName = `${campaign} :::: DID/Tfn is ${didTfn} for Type: ${type} -- must have DestinationDID --> ${liveops}`;\r",
									"}\r",
									"\r",
									"pm.test(testName, function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    if (type == \"DestinationDID\"){\r",
									"        pm.expect(jsonData.DistinationDID).to.eql(liveops);    \r",
									"    } \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "adf8ba0b-2398-4fd2-b334-16af07e7d19f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://lm.cignium.com/run/cignium/{{Campaign}}/{{CurrentEnv}}/ivr-dest-dids?Type={{DestinationDidTypeLiveops}}&TZDID={{Did}}",
							"protocol": "https",
							"host": [
								"lm",
								"cignium",
								"com"
							],
							"path": [
								"run",
								"cignium",
								"{{Campaign}}",
								"{{CurrentEnv}}",
								"ivr-dest-dids"
							],
							"query": [
								{
									"key": "Type",
									"value": "{{DestinationDidTypeLiveops}}",
									"description": "This request will be used only for Liveops using DestinationDID as param"
								},
								{
									"key": "TZDID",
									"value": "{{Did}}"
								}
							]
						},
						"description": "# Purpose:\n\nTo validate the correct Liveops by DID/Tfn\n\n## Usage\n\nCreate a json file like:\n\n```\n[\n {\n   \"Did\": ##########,,\n   \"Campaign\": {{Campaign}},\n   \"DestinationDidTypeLiveops\": \"DestinationDID\",\n   \"LiveopsDid\": A#A#A#A#A#A#\n }\n]\n\n```"
					},
					"response": []
				},
				{
					"name": "TR - [IVR] Destination DIDs (Greeting)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62e1252b-5a07-47a2-8972-9b3b6fa3b230",
								"exec": [
									"let type = pm.iterationData.get(\"DestinationDidTypeGreeting\") || pm.collectionVariables.get(\"DestinationDidTypeGreeting\") || pm.request.url.query.get(\"Type\");\r",
									"let didTfn = pm.iterationData.get(\"Did\") || pm.collectionVariables.get(\"Did\") || pm.request.url.query.get(\"Tfn\");\r",
									"\r",
									"let campaign = (pm.iterationData.get(\"Campaign\") || pm.collectionVariables.get(\"Campaign\") || '').toUpperCase();\r",
									"var voiceFileNameNoFormat = (pm.iterationData.get(\"VoiceFileName\") || \"\");\r",
									"var voiceFileName = \"\";\r",
									"\r",
									"var testName = \"\"; \r",
									"\r",
									"voiceFileName = [ \"\", null, \"null\", \"NA\", \"N/A\"].includes(voiceFileNameNoFormat) ? null :  voiceFileNameNoFormat.toString();\r",
									"\r",
									"if (type == \"IVRGreeting\"){    \r",
									"    testName = `${campaign} :::: DID/Tfn is ${didTfn} for Type: ${type} -- must have DestinationDID --> NA  && VoiceFileName --> ${voiceFileName}`;\r",
									"}\r",
									"\r",
									"pm.test(testName, function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    if (type == \"IVRGreeting\"){\r",
									"        pm.expect(jsonData.VoiceFileName).to.eql(voiceFileName);    \r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "98d352be-4b8c-4057-834e-1c3944a4bf5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://lm.cignium.com/run/cignium/{{Campaign}}/{{CurrentEnv}}/ivr-dest-dids?Type={{DestinationDidTypeGreeting}}&TZDID={{Did}}",
							"protocol": "https",
							"host": [
								"lm",
								"cignium",
								"com"
							],
							"path": [
								"run",
								"cignium",
								"{{Campaign}}",
								"{{CurrentEnv}}",
								"ivr-dest-dids"
							],
							"query": [
								{
									"key": "Type",
									"value": "{{DestinationDidTypeGreeting}}",
									"description": "This request will be used only for Greeting using IVRGreeting as param"
								},
								{
									"key": "TZDID",
									"value": "{{Did}}"
								}
							]
						},
						"description": "# Purpose:\n\nTo validate the correct greeting by DID/Tfn\n\n## Usage\n\nCreate a json file like:\n\n```\n[\n {\n   \"Did\": ##########,,\n   \"Campaign\": \"cuy-AAA\",\n   \"DestinationDidTypeIvrGreeting\": \"IVRGreeting\",\n   \"VoiceFileName\": A#A#A#A#A#A#\n }\n]\n\n```"
					},
					"response": []
				},
				{
					"name": "TR - [Populate Inbound] Afid by Tfn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbeca481-a18f-454c-a858-8f808e443cac",
								"exec": [
									"let expectedAfid = pm.iterationData.get(\"Afid\") || pm.collectionVariables.get(\"Afid\");\r",
									"\r",
									"let didTfn = pm.iterationData.get(\"Did\") || pm.collectionVariables.get(\"Did\") || pm.request.url.query.get(\"Tfn\");;\r",
									"let campaign = (pm.iterationData.get(\"Campaign\") || pm.collectionVariables.get(\"Campaign\") || '').toUpperCase();\r",
									"\r",
									"let testName = `${campaign} :::: DID/Tfn is ${didTfn} for campaign : ${campaign.toUpperCase()}  and must have afid --> ${expectedAfid}`;\r",
									"\r",
									"pm.test(testName, function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    \r",
									"    if (campaign == \"CUY-MMS\"){ // Campaign with different Endpoint\r",
									"        pm.expect(jsonData.AFID).to.eql(expectedAfid.toString());\r",
									"    }else{\r",
									"        pm.expect(jsonData.Afid).to.eql(expectedAfid.toString());\r",
									"    }    \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "411a262c-f06a-4541-82af-4f7ff8029e02",
								"exec": [
									"let campaign = (pm.iterationData.get(\"Campaign\") || pm.collectionVariables.get(\"Campaign\") || '').toUpperCase();\r",
									"\r",
									"ParseCampaignName(campaign);\r",
									"\r",
									"pm.collectionVariables.set(\"AfidByTfnEndpoint\", \"afid-by-tfn\");\r",
									"if (campaign == \"cuy-mms\"){    \r",
									"    pm.collectionVariables.set(\"AfidByTfnEndpoint\", \"populate-ib-afid-by-tfn\");\r",
									"}\r",
									"\r",
									"function ParseCampaignName(campaign) {\r",
									"    let cuyPrefix = 'CUY-';\r",
									"\r",
									"    if (!campaign.includes(cuyPrefix))\r",
									"        campaign = `${cuyPrefix}${campaign}`;\r",
									"    \r",
									"    if ([\"CUY-ZMA\", \"ZMA\"].includes(campaign))\r",
									"        campaign = \"cuy-oma\";\r",
									"    \r",
									"    pm.iterationData.set(\"Campaign\", campaign);\r",
									"    pm.collectionVariables.set(\"Campaign\", campaign);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5fe4bbbd-51e0-4242-8b88-e8affd16a63c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://lm.cignium.com/run/cignium/{{Campaign}}/{{CurrentEnv}}/{{AfidByTfnEndpoint}}?Tfn={{Did}}",
							"protocol": "https",
							"host": [
								"lm",
								"cignium",
								"com"
							],
							"path": [
								"run",
								"cignium",
								"{{Campaign}}",
								"{{CurrentEnv}}",
								"{{AfidByTfnEndpoint}}"
							],
							"query": [
								{
									"key": "Tfn",
									"value": "{{Did}}",
									"description": "Direct Inward Dial number is usually number which is not known/visible to leads and is used for: \n•\ttransfers - internal and external\n•\tto route from Invoca TFNs to Noble, in order to be able to identify the source or channel of contact of the lead"
								}
							]
						},
						"description": "# Purpose:\n\nTo validate the correct Afid by DID/Tfn\n\n## Usage\n\nCreate a json file like:\n\n```\n[\n {\n   \"Did\": ##########,\n   \"Campaign\": \"cuy-AAA\",\n   \"Afid\": ######\n }\n]\n\n```"
					},
					"response": []
				}
			],
			"id": "297839a6-6ae1-48cb-b50a-54cf1d378fb7"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3133d22d-aedf-4d98-9b6e-da93e52f68c9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "76bb7638-e169-44f7-b09c-47edc573e82e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "a86d61dd-ed4d-4f86-83a1-89bec685d7c1",
			"key": "Did",
			"value": "2016957537"
		},
		{
			"id": "d185e5e6-c079-4fa9-8994-f6b6bfaf8b69",
			"key": "Campaign",
			"value": "cuy-xyz"
		},
		{
			"id": "d2d428ac-30b8-450e-887f-67c6e67e4c2c",
			"key": "AfidByTfnEndpoint",
			"value": "afid-by-tfn"
		},
		{
			"id": "9421c383-f8e8-429d-bab7-7c89370e5edc",
			"key": "IbSubCampaign",
			"value": "SB00",
			"type": "string"
		},
		{
			"id": "08a31ea0-34b1-49d3-b5b6-7bada10d3d90",
			"key": "CampaignId",
			"value": "HMA",
			"type": "string"
		},
		{
			"id": "3669bcb5-2f88-4213-8397-217b2e7ba090",
			"key": "Afid",
			"value": "523687",
			"type": "string"
		},
		{
			"id": "93d83dcc-22a7-41bb-9545-1884d1c465fa",
			"key": "OBSubCampaignEndpoint",
			"value": "dnis"
		},
		{
			"id": "1fa7c5c7-78f4-484f-9fd4-370f4c0d172c",
			"key": "Cid",
			"value": "1111"
		},
		{
			"id": "0f6c83e8-bab7-45dd-b100-0fc8a75fcd75",
			"key": "ZipCode",
			"value": "123",
			"type": "string"
		},
		{
			"id": "2e55930d-f2e7-4dde-b9de-352b637c85dc",
			"key": "DestinationDidTypeLiveops",
			"value": "DestinationDID"
		},
		{
			"id": "771e47cf-e4fa-4a81-adf2-a83cd22b1c17",
			"key": "IsZingCarrier",
			"value": "0",
			"type": "string"
		},
		{
			"id": "973c1843-f307-4a93-b16e-9fd55da84f31",
			"key": "ExpectedSubCampaignOB",
			"value": "SB99",
			"type": "string"
		},
		{
			"id": "0b467647-6ab6-4a0c-9899-7308e9f8bc6a",
			"key": "DestinationDidTypeGreeting",
			"value": "IVRGreeting"
		},
		{
			"id": "e30012cf-e7a9-4ae9-981a-027c2afcf162",
			"key": "ObSubCampaign",
			"value": "SB21",
			"type": "string"
		}
	]
}