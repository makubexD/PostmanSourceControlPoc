{
  "info": {
    "_postman_id": "8bb27d30-00bf-4952-8ba3-14366cdd02bd",
    "name": "DIDConfig",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "CUY",
      "item": [
        {
          "name": "TR - [Noble] SubcampaignByTFN",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8e439a3b-f3ae-42ed-bbb1-3e2fa9c66198",
                "exec": [
                  "let expectedIbsubCampaign = pm.iterationData.get(\"expectedIbsubCampaign\") || pm.collectionVariables.get(\"expectedIbsubCampaign\");\r",
                  "let didTfn = pm.iterationData.get(\"Did\") || pm.collectionVariables.get(\"Did\") || pm.request.url.query.get(\"Tfn\");\r",
                  "\r",
                  "let jsonData = pm.response.json();\r",
                  "let testName = `DID/Tfn: ${didTfn}, expected Subcampaign: ${expectedIbsubCampaign} ---> Subcampaign: ${jsonData.Subcampaign}`;\r",
                  "\r",
                  "pm.test(testName, function () {\r",
                  "    pm.expect(jsonData.Subcampaign).to.eql(expectedIbsubCampaign.toString());\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "11349ad9-00f7-449b-814f-3e2f2ce8b1ef",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://lm.cignium.com/run/cignium/cuy/{{CurrentEnv}}/subcampaign-table?Tfn={{Did}}",
              "protocol": "https",
              "host": [
                "lm",
                "cignium",
                "com"
              ],
              "path": [
                "run",
                "cignium",
                "cuy",
                "{{CurrentEnv}}",
                "subcampaign-table"
              ],
              "query": [
                {
                  "key": "Tfn",
                  "value": "{{Did}}"
                }
              ]
            },
            "description": "# Purpose:\r\n\r\nTo validate the new SubCampaigns according new requirements.\r\n\r\n## Usage\r\nCreate a json file like:\r\n\r\n\t[\r\n\t {\r\n\t   \"SubCampaign\": \"SB##\",\r\n\t   \"DidTfn\": ##########\r\n\t }\r\n\t]"
          },
          "response": [
            {
              "id": "01224772-811b-43e7-b587-7598e6d698ae",
              "name": "00.TR-SubCampaignByTFN_2016957537",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://lm.cignium.com/run/cignium/cuy/{{CurrentEnv}}/subcampaign-table?Tfn={{Did}}",
                  "protocol": "https",
                  "host": [
                    "lm",
                    "cignium",
                    "com"
                  ],
                  "path": [
                    "run",
                    "cignium",
                    "cuy",
                    "{{CurrentEnv}}",
                    "subcampaign-table"
                  ],
                  "query": [
                    {
                      "key": "Tfn",
                      "value": "{{Did}}"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Length",
                  "value": "158"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Date",
                  "value": "Tue, 03 May 2022 23:20:24 GMT"
                },
                {
                  "key": "Access-Control-Expose-Headers",
                  "value": "Request-Context"
                },
                {
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=31536000; includeSubDomains"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:cd9fbec2-9850-4ba7-ab93-7960ae35dedd"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"Subcampaign\": \"SB33\",\n    \"Active\": \"TRUE\"\n}"
            }
          ]
        }
      ],
      "id": "5d4e6c82-14f4-400b-bbd4-2414989d07f0"
    },
    {
      "name": "ByCampaigns",
      "item": [
        {
          "name": "PR - [DNIS - OB]",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8d8d29ab-dc05-4f52-923a-4033c35678a3",
                "exec": [
                  "let afid = pm.iterationData.get(\"Afid\") || pm.collectionVariables.get(\"Afid\") || pm.request.url.query.get(\"Afid\");\r",
                  "let campaign = pm.iterationData.get(\"Campaign\") || pm.collectionVariables.get(\"Campaign\");\r",
                  "\r",
                  "let expectedSubCampaignOb = pm.iterationData.get(\"ExpectedSubCampaignOB\") || pm.collectionVariables.get(\"ExpectedSubCampaignOB\");\r",
                  "\r",
                  "let subCampaignOBWithOutPrefix = expectedSubCampaignOb.substring(2);\r",
                  "\r",
                  "let testName = `For campaign: ${campaign.toUpperCase()} -- With Afid equals to: ${afid} must have SubCampaign --> ${expectedSubCampaignOb}`;\r",
                  "\r",
                  "pm.test(testName, function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    var dnis = jsonData.dnis;\r",
                  "\r",
                  "    if (dnis){        \r",
                  "        var subCampaignOBWithOutPrefixFromDnis = dnis.substring(5,7);        \r",
                  "        pm.expect(subCampaignOBWithOutPrefix).to.eql(subCampaignOBWithOutPrefixFromDnis);\r",
                  "    }    \r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "54c68fed-7038-4b92-a678-704375eed9dc",
                "exec": [
                  "var campaign = pm.iterationData.get(\"Campaign\") || pm.collectionVariables.get(\"Campaign\");\r",
                  "var isZingCarrier = pm.iterationData.get(\"IsZingCarrier\") || pm.collectionVariables.get(\"IsZingCarrier\");\r",
                  "\r",
                  "var defaultZipcode = \"07303\";\r",
                  "\r",
                  "\r",
                  "pm.collectionVariables.set(\"ZipCode\", defaultZipcode);\r",
                  "\r",
                  "UpdateZipCodeForZing(isZingCarrier);\r",
                  "SetObSubcampaignEndpoint(campaign);\r",
                  "\r",
                  "function SetObSubcampaignEndpoint(campaign) {\r",
                  "    pm.collectionVariables.set(\"OBSubCampaignEndpoint\", \"dnis\");\r",
                  "    if ([\"cuy-anma\", \"cuy-hma\"].includes(campaign)) {\r",
                  "        pm.collectionVariables.set(\"OBSubCampaignEndpoint\", \"dnis-subcampaign-ob\");\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "function UpdateZipCodeForZing(isZingCarrier) {\r",
                  "    var zingZipCode = \"60603\";\r",
                  "\r",
                  "    if (isZingCarrier === 1) {\r",
                  "        pm.collectionVariables.set(\"ZipCode\", zingZipCode);\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "f9695147-6436-4ff3-b49e-df9d275c5b33",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://lm.cignium.com/run/cignium/{{Campaign}}/{{CurrentEnv}}/{{OBSubCampaignEndpoint}}?State=NJ&Afid={{Afid}}&CID={{Cid}}&ZipCode={{ZipCode}}",
              "protocol": "https",
              "host": [
                "lm",
                "cignium",
                "com"
              ],
              "path": [
                "run",
                "cignium",
                "{{Campaign}}",
                "{{CurrentEnv}}",
                "{{OBSubCampaignEndpoint}}"
              ],
              "query": [
                {
                  "key": "State",
                  "value": "NJ"
                },
                {
                  "key": "Afid",
                  "value": "{{Afid}}"
                },
                {
                  "key": "CID",
                  "value": "{{Cid}}"
                },
                {
                  "key": "ZipCode",
                  "value": "{{ZipCode}}"
                }
              ]
            },
            "description": "# Purpose:\r\n\r\nTo validate the correct Afid by SubCampaign(OB), according new requirements by each campaign.\r\n\r\n## Usage\r\nCreate a json file like:\r\n\r\n\t[\r\n\t {\r\n\t   \"Campaign\": \"cuy-AAA\",\r\n\t   \"Afid\": ######,\r\n\t   \"SubCampaignOB\": \"SB##\"\r\n\t }\r\n\t]"
          },
          "response": []
        },
        {
          "name": "TR - [IVR] Destination DIDs (Liveops)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "62e1252b-5a07-47a2-8972-9b3b6fa3b230",
                "exec": [
                  "let type = pm.iterationData.get(\"DestinationDidType\") || pm.collectionVariables.get(\"DestinationDidTypeLiveops\") || pm.request.url.query.get(\"Type\");\r",
                  "let didTfn = pm.iterationData.get(\"Did\") || pm.collectionVariables.get(\"Did\") || pm.request.url.query.get(\"Tfn\");\r",
                  "\r",
                  "let campaign = pm.iterationData.get(\"Campaign\") || pm.collectionVariables.get(\"Campaign\");\r",
                  "var destinationDIDNoFormat = pm.iterationData.get(\"DestinationDID\");\r",
                  "var destinationDID = \"\";\r",
                  "\r",
                  "var testName = \"\"; \r",
                  "\r",
                  "destinationDID = [ \"null\", \"NA\", \"N/A\"].includes(destinationDIDNoFormat) ? null :  destinationDIDNoFormat.toString();\r",
                  "\r",
                  "if (type == \"DestinationDID\"){\r",
                  "    testName = `DID/Tfn is ${didTfn} for Type: ${type} -- must have DestinationDID --> ${destinationDID}`;\r",
                  "}\r",
                  "\r",
                  "pm.test(testName, function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    if (type == \"DestinationDID\"){\r",
                  "        pm.expect(jsonData.DistinationDID).to.eql(destinationDID);    \r",
                  "    } \r",
                  "});\r",
                  "\r",
                  "\r",
                  "// var didTfn = pm.iterationData.get(\"DidTfn\");\r",
                  "// var campaign = pm.iterationData.get(\"Campaign\");\r",
                  "// var type = pm.iterationData.get(\"Type\");\r",
                  "// var destinationDIDNoFormat = pm.iterationData.get(\"DestinationDID\");\r",
                  "// var destinationDID = \"\";\r",
                  "\r",
                  "// var testName = \"\"; \r",
                  "\r",
                  "// destinationDID = destinationDIDNoFormat == \"null\" || destinationDIDNoFormat == \"NA\" || destinationDIDNoFormat == \"N/A\"  ? null :  destinationDIDNoFormat.toString();\r",
                  "\r",
                  "// if (type == \"DestinationDID\"){\r",
                  "//     testName = `DID/Tfn is ${didTfn} for Type: ${type} -- must have DestinationDID --> ${destinationDID}`;\r",
                  "// }\r",
                  "// if (type == \"IVRGreeting\"){    \r",
                  "//     testName = `DID/Tfn is ${didTfn} for Type: ${type} -- must have DestinationDID --> NA  && VoiceFileName --> ${destinationDID}`;\r",
                  "// }\r",
                  "\r",
                  "// pm.test(testName, function () {\r",
                  "//     var jsonData = pm.response.json();\r",
                  "//     if (type == \"DestinationDID\"){\r",
                  "//         pm.expect(jsonData.DistinationDID).to.eql(destinationDID);    \r",
                  "//     }\r",
                  "\r",
                  "//     if (type == \"IVRGreeting\"){\r",
                  "//         pm.expect(jsonData.VoiceFileName).to.eql(destinationDID);    \r",
                  "//     }\r",
                  "// });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "adf8ba0b-2398-4fd2-b334-16af07e7d19f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://lm.cignium.com/run/cignium/{{Campaign}}/{{CurrentEnv}}/ivr-dest-dids?Type={{DestinationDidType}}&TZDID={{Did}}",
              "protocol": "https",
              "host": [
                "lm",
                "cignium",
                "com"
              ],
              "path": [
                "run",
                "cignium",
                "{{Campaign}}",
                "{{CurrentEnv}}",
                "ivr-dest-dids"
              ],
              "query": [
                {
                  "key": "Type",
                  "value": "{{DestinationDidType}}"
                },
                {
                  "key": "TZDID",
                  "value": "{{Did}}"
                }
              ]
            },
            "description": "# Purpose:\r\n\r\nTo validate the correct DestinationDid by DID/Tfn, according new requirements by each campaign. **(Works for every Type --> DestinationDID, IVRGreeting...)**\r\n\r\n## Usage\r\nCreate a json file like:\r\n\r\n\t[\r\n\t {\r\n\t   \"DidTfn\": ##########,,\r\n\t   \"Campaign\": \"cuy-AAA\",\r\n\t   \"Type\": \"AAAAAAAAAAAAA\",\r\n\t   \"DestinationDID\": A#A#A#A#A#A#\r\n\t }\r\n\t]"
          },
          "response": []
        },
        {
          "name": "TR - [IVR] Destination DIDs (Greeting)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "62e1252b-5a07-47a2-8972-9b3b6fa3b230",
                "exec": [
                  "let type = pm.iterationData.get(\"DestinationDidType\") || pm.collectionVariables.get(\"DestinationDidType\") || pm.request.url.query.get(\"Type\");\r",
                  "let didTfn = pm.iterationData.get(\"Did\") || pm.collectionVariables.get(\"Did\") || pm.request.url.query.get(\"Tfn\");\r",
                  "\r",
                  "let campaign = pm.iterationData.get(\"Campaign\") || pm.collectionVariables.get(\"Campaign\");\r",
                  "var destinationDIDNoFormat = pm.iterationData.get(\"DestinationDID\");\r",
                  "var destinationDID = \"\";\r",
                  "\r",
                  "var testName = \"\"; \r",
                  "\r",
                  "destinationDID = [ \"null\", \"NA\", \"N/A\"].includes(destinationDIDNoFormat) ? null :  destinationDIDNoFormat.toString();\r",
                  "\r",
                  "if (type == \"DestinationDID\"){\r",
                  "    testName = `DID/Tfn is ${didTfn} for Type: ${type} -- must have DestinationDID --> ${destinationDID}`;\r",
                  "}\r",
                  "if (type == \"IVRGreeting\"){    \r",
                  "    testName = `DID/Tfn is ${didTfn} for Type: ${type} -- must have DestinationDID --> NA  && VoiceFileName --> ${destinationDID}`;\r",
                  "}\r",
                  "\r",
                  "pm.test(testName, function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    if (type == \"DestinationDID\"){\r",
                  "        pm.expect(jsonData.DistinationDID).to.eql(destinationDID);    \r",
                  "    }\r",
                  "\r",
                  "    if (type == \"IVRGreeting\"){\r",
                  "        pm.expect(jsonData.VoiceFileName).to.eql(destinationDID);    \r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "\r",
                  "// var didTfn = pm.iterationData.get(\"DidTfn\");\r",
                  "// var campaign = pm.iterationData.get(\"Campaign\");\r",
                  "// var type = pm.iterationData.get(\"Type\");\r",
                  "// var destinationDIDNoFormat = pm.iterationData.get(\"DestinationDID\");\r",
                  "// var destinationDID = \"\";\r",
                  "\r",
                  "// var testName = \"\"; \r",
                  "\r",
                  "// destinationDID = destinationDIDNoFormat == \"null\" || destinationDIDNoFormat == \"NA\" || destinationDIDNoFormat == \"N/A\"  ? null :  destinationDIDNoFormat.toString();\r",
                  "\r",
                  "// if (type == \"DestinationDID\"){\r",
                  "//     testName = `DID/Tfn is ${didTfn} for Type: ${type} -- must have DestinationDID --> ${destinationDID}`;\r",
                  "// }\r",
                  "// if (type == \"IVRGreeting\"){    \r",
                  "//     testName = `DID/Tfn is ${didTfn} for Type: ${type} -- must have DestinationDID --> NA  && VoiceFileName --> ${destinationDID}`;\r",
                  "// }\r",
                  "\r",
                  "// pm.test(testName, function () {\r",
                  "//     var jsonData = pm.response.json();\r",
                  "//     if (type == \"DestinationDID\"){\r",
                  "//         pm.expect(jsonData.DistinationDID).to.eql(destinationDID);    \r",
                  "//     }\r",
                  "\r",
                  "//     if (type == \"IVRGreeting\"){\r",
                  "//         pm.expect(jsonData.VoiceFileName).to.eql(destinationDID);    \r",
                  "//     }\r",
                  "// });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "98d352be-4b8c-4057-834e-1c3944a4bf5b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://lm.cignium.com/run/cignium/{{Campaign}}/{{CurrentEnv}}/ivr-dest-dids?Type={{DestinationDidType}}&TZDID={{Did}}",
              "protocol": "https",
              "host": [
                "lm",
                "cignium",
                "com"
              ],
              "path": [
                "run",
                "cignium",
                "{{Campaign}}",
                "{{CurrentEnv}}",
                "ivr-dest-dids"
              ],
              "query": [
                {
                  "key": "Type",
                  "value": "{{DestinationDidType}}"
                },
                {
                  "key": "TZDID",
                  "value": "{{Did}}"
                }
              ]
            },
            "description": "# Purpose:\r\n\r\nTo validate the correct DestinationDid by DID/Tfn, according new requirements by each campaign. **(Works for every Type --> DestinationDID, IVRGreeting...)**\r\n\r\n## Usage\r\nCreate a json file like:\r\n\r\n\t[\r\n\t {\r\n\t   \"DidTfn\": ##########,,\r\n\t   \"Campaign\": \"cuy-AAA\",\r\n\t   \"Type\": \"AAAAAAAAAAAAA\",\r\n\t   \"DestinationDID\": A#A#A#A#A#A#\r\n\t }\r\n\t]"
          },
          "response": []
        },
        {
          "name": "TR - [Populate Inbound] Afid by Tfn",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbeca481-a18f-454c-a858-8f808e443cac",
                "exec": [
                  "let expectedAfid = pm.iterationData.get(\"expectedAfid\") || pm.collectionVariables.get(\"expectedAfid\");\r",
                  "\r",
                  "let didTfn = pm.iterationData.get(\"Did\") || pm.collectionVariables.get(\"Did\") || pm.request.url.query.get(\"Tfn\");;\r",
                  "let campaign = pm.iterationData.get(\"Campaign\") || pm.collectionVariables.get(\"Campaign\");\r",
                  "\r",
                  "let testName = `DID/Tfn is ${didTfn} for campaign : ${campaign.toUpperCase()}  and must have afid --> ${expectedAfid}`;\r",
                  "\r",
                  "pm.test(testName, function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    \r",
                  "    if (campaign == \"cuy-mms\"){ // Campaign with different Endpoint\r",
                  "        pm.expect(jsonData.AFID).to.eql(expectedAfid.toString());\r",
                  "    }else{\r",
                  "        pm.expect(jsonData.Afid).to.eql(expectedAfid.toString());\r",
                  "    }    \r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "411a262c-f06a-4541-82af-4f7ff8029e02",
                "exec": [
                  "let campaign = pm.iterationData.get(\"Campaign\") || pm.collectionVariables.get(\"Campaign\");\r",
                  "let cuyPrefix = 'CUY-' \r",
                  "\r",
                  "if (!campaign.includes(cuyPrefix))\r",
                  "    campaign = `${cuyPrefix}${Campaign}`;\r",
                  "\r",
                  "if(campaign == \"CUY-ZMA\") \r",
                  "    campaign = \"cuy-oma\";\r",
                  "\r",
                  "pm.collectionVariables.set(\"AfidByTfnEndpoint\", \"afid-by-tfn\");\r",
                  "if (campaign == \"cuy-mms\"){    \r",
                  "    pm.collectionVariables.set(\"AfidByTfnEndpoint\", \"populate-ib-afid-by-tfn\");\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "5fe4bbbd-51e0-4242-8b88-e8affd16a63c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://lm.cignium.com/run/cignium/{{Campaign}}/{{CurrentEnv}}/{{AfidByTfnEndpoint}}?Tfn={{Did}}",
              "protocol": "https",
              "host": [
                "lm",
                "cignium",
                "com"
              ],
              "path": [
                "run",
                "cignium",
                "{{Campaign}}",
                "{{CurrentEnv}}",
                "{{AfidByTfnEndpoint}}"
              ],
              "query": [
                {
                  "key": "Tfn",
                  "value": "{{Did}}",
                  "description": "Direct Inward Dial number is usually number which is not known/visible to leads and is used for: \n•\ttransfers - internal and external\n•\tto route from Invoca TFNs to Noble, in order to be able to identify the source or channel of contact of the lead"
                }
              ]
            },
            "description": "# Purpose:\r\n\r\nTo validate the correct Afid by DID/Tfn, according new requirements by each campaign. \r\n\r\n## Usage\r\nCreate a json file like:\r\n\r\n\t[\r\n\t {\r\n\t   \"DidTfn\": ##########,\r\n\t   \"Campaign\": \"cuy-AAA\",\r\n\t   \"Afid\": ######\r\n\t }\r\n\t]"
          },
          "response": []
        }
      ],
      "id": "297839a6-6ae1-48cb-b50a-54cf1d378fb7"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "fe53b041-1199-4bce-9a42-87e05391e8a8",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "b2e8112f-497a-4c59-80ea-4815d24c6b47",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "4293fd05-ab60-41af-8750-0142a079bc92",
      "key": "Did",
      "value": "2223334444"
    },
    {
      "id": "eb09639c-99d9-401f-932a-0ddb1a6abe99",
      "key": "Campaign",
      "value": "cuy-hma"
    },
    {
      "id": "d9a2586a-5e7f-4f61-8398-2eeb5526d17e",
      "key": "AfidByTfnEndpoint",
      "value": "afid-by-tfn"
    },
    {
      "id": "e5adea5c-2c61-4b88-ade3-6fb5d0f2fedf",
      "key": "IBSubCampaign",
      "value": "SB00",
      "type": "string"
    },
    {
      "id": "0f36c600-77a7-4a7e-bebc-5952523ea272",
      "key": "CampaignId",
      "value": "HMA",
      "type": "string"
    },
    {
      "id": "464969ea-d11d-4c41-b4f4-bdf77b8fbbaa",
      "key": "Afid",
      "value": "523687",
      "type": "string"
    },
    {
      "id": "be08adac-1974-44c4-a09d-9872dd1a984b",
      "key": "OBSubCampaignEndpoint",
      "value": "dnis"
    },
    {
      "id": "29dd4580-4343-4ffc-a60d-e34628addb1d",
      "key": "Cid",
      "value": "1111"
    },
    {
      "id": "d2a78e4c-35d9-46b2-b970-45b780457545",
      "key": "ZipCode",
      "value": "123",
      "type": "string"
    },
    {
      "id": "1448f524-2d8a-437d-8bb3-49487ca337c9",
      "key": "DestinationDidTypeLiveops",
      "value": "DestinationDID"
    },
    {
      "id": "5f1d3532-c373-4b6c-824c-ebd6f5cc4510",
      "key": "IsZingCarrier",
      "value": "0",
      "type": "string"
    },
    {
      "id": "432d7d6c-3a4c-4bab-8fe3-87ed8ce0df2c",
      "key": "ExpectedSubCampaignOB",
      "value": "SB99",
      "type": "string"
    },
    {
      "id": "6b4f06be-0729-48f3-8978-1be262526215",
      "key": "OBSubCampaignEndoint",
      "value": ""
    }
  ]
}